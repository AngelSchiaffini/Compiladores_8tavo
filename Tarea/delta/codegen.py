from arpeggio import PTNodeVisitor #type:ignore


class CodeGenerationVisitor(PTNodeVisitor):

    WAT_TEMPLATE = ''';; Code generated by the Delta compiler
(module
  (func
    (export "_start")
    (result i32)
{}  )
)
'''

    def __init__(self, symbol_table, **kwargs):
        super().__init__(**kwargs)
        self.__symbol_table = symbol_table

    def visit_program(self, node, children):
        return CodeGenerationVisitor.WAT_TEMPLATE.format(children[0])

    def visit_expression(self, node, children):
        result = [children[0]]
        for i in range(1, len(children), 2):
            result.append(children[i + 1])
            match children[i]:
                case '+':
                    result.append('    i32.add\n')
                case '-':
                    result.append('    i32.sub\n')
        return ''.join(result)
    
    def visit_multiplicative(self, node, children):
        result = [children[0]]
        for i in range(1, len(children), 2):
            result.append(children[i + 1])
            match children[i]:
                case '*':
                    result.append('    i32.mul\n')
                case '/':
                    result.append('    i32.div_s\n') #division con signo
                case '%':
                    result.append('    i32.rem_s\n') #residuo con signo
        return ''.join(result)

    def visit_primary(self, node, children):
        return children[0]

    def visit_decimal(self, node, children):
        return f'    i32.const {node.value}\n'

    def visit_boolean(self, node, children):
        if children[0] == 'true':
            return '    i32.const 1\n'
        return '    i32.const 0\n'
    

    def visit_base(self, node, children):
        hex = {
            A: 10,
            B: 11,
            C: 12,
            D: 13,
            E: 14,
            F: 15
        }
        for i in range(len(children)):
            val = 0
            key = children[i]
            for key in hex:
                val += key * (16 ** i)
        return f'i32.const {valor}'
    